from pydantic import BaseModel
from datetime import date

# --- Word Schemas ---
# Base schema for a word, contains fields common to creating and reading.
class WordBase(BaseModel):
    text: str
    definition: str

# Schema for creating a new word. Inherits from WordBase.
class WordCreate(BaseModel):
    text: str
    definition: str

# Schema for reading a word from the API. Inherits from WordBase.
# Includes fields that are generated by the database.
class Word(WordBase):
    id: int
    owner_id: int
    difficulty: int

    # This tells Pydantic to read the data even if it is not a dict,
    # but an ORM model (or any other arbitrary object with attributes).
    class Config:
        orm_mode = True


# --- User Schemas ---
# Base schema for a user.
class UserBase(BaseModel):
    username: str

# Schema for creating a new user. Expects a password.
class UserCreate(UserBase):
    password: str

# Schema for reading a user from the API.
# It should NOT include the password. It will include the user's words.
class User(UserBase):
    id: int
    words: list[Word] = []

    class Config:
        orm_mode = True

# --- Token Schemas ---
# This defines the shape of the response when a user logs in.
class Token(BaseModel):
    access_token: str
    token_type: str

# This defines the data we'll extract from the JWT payload.
class TokenData(BaseModel):
    username: str | None = None

# --- Token Schemas ---
class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: str | None = None


# --- Review Schemas ---
class ReviewResult(BaseModel):
    was_correct: bool

class AIWordDetailRequest(BaseModel):
    word_text: str

class AIWordDetailResponse(BaseModel):
    definition: str
    example: str

class AIWordExplanation(BaseModel):
    definition: str
    example: str
    mnemonic: str

class AIRegenerateRequest(BaseModel):
    word_text: str
    previous_example: str
    previous_mnemonic: str

class AIRegenerateResponse(BaseModel):
    example: str
    mnemonic: str

class AISuggestionResponse(BaseModel):
    suggestions: list[str]